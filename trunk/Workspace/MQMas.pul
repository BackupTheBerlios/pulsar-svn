# MQMas.pul
#
# PULSAR Project:
#
# version=1.0
# Author: C. Fernandez
#
#------------------------------------------------------------------------------
# License:
#
# Copyright (C) 2006-2007 Jean-Paul Amoureux, Christian Fernandez
# JPA - Unite de Catalyse et Chimie du Solide, Lille, France.
# CF  - Laboratoire Catalyse et Spectrochimie, Caen, France.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License (GPL)
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# To read the license please visit http://www.gnu.org/copyleft/gpl.html
#------------------------------------------------------------------------------
# Purpose:
#   Performing a variation of one parameter and selecting coherence
#   MQMAS optimization exemple
#------------------------------------------------------------------------------

# start a new simulation
#-----------------------
observed="23Na"
sim1=Simulation(verbose=true)
sim1.set_channel(observed)         

# Nucleus definition 
#-------------------- 
Na1=Nucleus(observed)                          
Na1.set_quadrupole(cq="1.5 mhz")   
Na1.set_lb("100 Hz")               
sim1.add_nucleus(Na1)              

# simulation setting
#-------------------                
sim1.set_spinningspeed("10 kHz")
sim1.set_spinningangle(MAS)            
sim1.set_npts("1 K")            
sim1.set_sw("20 kHz")           
sim1.set_accuracy(4)                 
sim1.set_rfstep(5)              

## required statement
sim1.select_nucleus()           # this statement is necessary 
                                # to validate the nucleus list 
                                # the two following statements must always appear after 'select_nucleus'
sim1.set_nsb(0)                 # default 0 (AUTO means automatic calculation of nsb) 
sim1.set_detect(CENTRAL)        # calculate only CENTRAL transitions

# Run simulation (variation of the p2 length
#----------------------------------------------
#
p2_list= arange(.25,4,.25)        # (start,end,step)
for p2 in p2_list:              # start a loop on p1
    sim1.set_pulse(3,powerS="100 kHz")     #first strong rf pulse
    sim1.set_pulse(p2,powerS="100 kHz")    #second rf pulse
    sim1.set_pathway(0,-3,-1)              #select the coherence transfer pathways
    sim1.execute_pulsar()  
    sim1.store_spectrum(data=p2,label="p2 length")   

    sim1.set_pulse(3,powerS="100 kHz")     #first strong rf pulse
    sim1.set_pulse(p2,powerS="100 kHz")    #second rf pulse
    sim1.set_pathway(0,+3,-1)              #select the coherence transfer pathways
    sim1.execute_pulsar()  
    sim1.store_spectrum(data=p2,label="p2 length") 
                                
#Write spectra
#-------------
sim1.write_spectra()

