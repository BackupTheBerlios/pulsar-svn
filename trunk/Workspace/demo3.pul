#------------------------------------------------------------------------------
# DEMO2.PUL
# version=1.0
# Author: C. Fernandez
#------------------------------------------------------------------------------
# Purpose:
#       a sample with several quadrupolar nucleus sites
#------------------------------------------------------------------------------
# Suggestion:
#       try to keep the following order of the statements in your own script
#------------------------------------------------------------------------------

# start a new simulation
#-----------------------
sim1=Simulation()               # Open a new simulation instance with 
                                # the default proton frequency set to 400Mhz
                                # (but we can also pass another proton frequency 
                                # it will be 600 MHz for the proton, if we write
                                #   sim1=Simulation("600 MHz")'          

# Nucleus definition 
#-------------------- 
# Site 1
#-------
Na1=Nucleus("23Na")             # To obtain correct value of the Larmor frequency
                                # and of the 'ppm' definition
                                # this statement must be set after 
                                # the definition of the simulation:
                                # e.g., sim1=Simulation()
Na1.set_quadrupole(cq="2.5 mhz", eta=0.0)    
                                # default cq=0,eta=0,alpha=0,beta=0,gamma=0
Na1.set_chemicalshift(iso="20 ppm")          
                                # default iso=0,csa=0,eta=0,alpha=0,beta=0,gamma=0 

# Site 2
#-------
Na2=Nucleus("23Na") 
Na2.set_quadrupole(cq="3.0 mhz", eta=0.5)    
Na2.set_chemicalshift(iso="0 ppm")         

# Site 3
#-------
Na3=Nucleus("23Na") 
Na3.set_quadrupole(cq="1.0 mhz", eta=1.)    
Na3.set_chemicalshift(iso="-5 ppm")         

# define the nuclei used in the simulation
#---------------------------------------
sim1.add_nucleus(Na1)           # add the nucleus defined as Na1 in the simulation
sim1.add_nucleus(Na2)           # add the second nucleus defined as Na2 in the simulation
                                # Now we have a list of two nuclei with index 0 and 1 respectively
sim1.add_nucleus(Na3)           # add the third nucleus defined as Na3 in the simulation
                                # Now we have a list of three nuclei with index 0 to 2 
                                
# simulation setting
#-------------------                
## Optional statements (to overset the default values)
sim1.set_spinningspeed("10 kHz") # default STATIC for non spinning sample
sim1.set_spinningangle(MAS)     # default MAS
sim1.set_qfactor(100)           # Probe quality factor (default 0.001)
sim1.set_npts("2 K")            # default 4096 or 4*K
sim1.set_sw("100 kHz")           # default 10000.
sim1.set_accuracy(5)            # default 8       
sim1.set_rfstep(5)              # default 5

# Pulse sequence
#---------------
sim1.set_channel("23Na")
sim1.set_idealpulse()           # set an ideal 90deg pulse

# Run simulations
#----------------
sim1.reset_spectra()            # reset the current spectrum buffer

nb=sim1.get_numberofnuclei("23Na")
for index in range(nb):
    ## required statement
    sim1.set_nucleus("23Na",index) 
                                # define the observed nucleus (required) 
                                # with the given Index in the simulation
    sim1.set_nsb(AUTO)          # default 0 (AUTO means automatic calculation of nsb) 
    sim1.set_detect(ALL)        # default ALL (other values: CENTRAL, SATELLITE)
    sim1.run_simulation()       # start execution of this script
    sim1.make_lb("100 Hz")      # make some broadenings
    sim1.store_spectrum()       # storing the result in the spectrum buffer

# Make a sum of the spectra and add it to the buffer for display
#---------------------------------------------------------------
sim1.sum_spectra(1,1,1)       # create a new spectrum by adding all 
                                # the spectrum in the buffer   
                                # taking into account the concentration (1 by default)
#sim1.set_displaytype("NORMAL")  # Display type (by default NORMAL